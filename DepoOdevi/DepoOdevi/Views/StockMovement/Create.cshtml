@model Entity.Concrete.StockMovement
@{
    ViewBag.Title = "Stok Hareketi Ekle";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Yeni Stok Hareketi Ekle</h3>
        <div class="card-tools">
            <a href="@Url.Action("Index", "StockMovement")" class="btn btn-secondary btn-sm">
                <i class="fas fa-arrow-left"></i> Stok Hareketleri Listesine Dön
            </a>
        </div>
    </div>
    <div class="card-body">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group mb-3">
                            @Html.LabelFor(model => model.ProductId, "Ürün", new { @class = "control-label" })
                            @Html.DropDownList("ProductId", (SelectList)ViewBag.ProductId, "-- Ürün Seçin --", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group mb-3">
                            @Html.LabelFor(model => model.MovementType, "Hareket Tipi", new { @class = "control-label" })
                            @Html.DropDownList("MovementType", (IEnumerable<SelectListItem>)ViewBag.MovementTypes, "-- Hareket Tipi Seçin --", new { @class = "form-control", id = "movementType" })
                            @Html.ValidationMessageFor(model => model.MovementType, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group mb-3">
                            @Html.LabelFor(model => model.Quantity, "Miktar", new { @class = "control-label" })
                            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", min = "1" } })
                            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group mb-3">
                            @Html.LabelFor(model => model.EmployeeId, "Çalışan", new { @class = "control-label" })
                            @Html.DropDownList("EmployeeId", (SelectList)ViewBag.EmployeeId, "-- Çalışan Seçin --", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.EmployeeId, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group mb-3">
                            @Html.LabelFor(model => model.UnitPrice, "Birim Fiyat", new { @class = "control-label" })
                            @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control", id = "unitPrice" } })
                            @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group mb-3">
                            @Html.LabelFor(model => model.Description, "Açıklama", new { @class = "control-label" })
                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control", rows = 3 })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-group mt-3">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Kaydet
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            // Hareket tipine göre birim fiyat alanını göster/gizle
            $("#movementType").change(function () {
                var selectedType = $(this).val();
                if (selectedType === "Satış" || selectedType === "İade") {
                    $("#unitPrice").closest(".form-group").show();
                } else {
                    $("#unitPrice").closest(".form-group").hide();
                    $("#unitPrice").val("");
                }
            });

            // Sayfa yüklendiğinde de kontrol et
            var initialType = $("#movementType").val();
            if (initialType !== "Satış" && initialType !== "İade") {
                $("#unitPrice").closest(".form-group").hide();
            }
        });
    </script>
} 